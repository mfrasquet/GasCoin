pragma solidity ^0.4.8;

contract Gascoin {
    /* Public variables of the token */
    string public standard = 'Gascoin';
    string public name;
    uint256 public priceGas;
    string public symbol;
    string public GSname;
    bool public GS_Active;
    uint8 public decimals;
    uint256 public totalSupply;
    address public owner;
    int256 public value256;
    uint[] public myArray;
    string[] public GSnetwork_names; 
    address[] public User_addresses;
    address[] GSnetwork_addresses;
    
    
    
    modifier onlyOwner{
        if (msg.sender !=owner) throw;
        _;
    }

    /* This creates an array with all balances */
    mapping (address => uint256) public balanceOfCoin;
    mapping (address => uint256) public GasSold;
    mapping (address => int256) public CreditIssued;
    mapping (address => uint256) public GasCoins;


    //EVENTS
    /* This generates a public event on the blockchain that will notify clients */
    //event Transfer(address indexed from, address indexed to, uint256 value);

    //Coding
    function Gascoin(
        uint256 initialSupply,
        string tokenName,
        uint8 decimalUnits,
        string tokenSymbol
        ) {
        balanceOfCoin[msg.sender] = initialSupply;          // Give the creator all initial tokens. This amount is for default backup 
        totalSupply = initialSupply;                        // Update total supply
        name = tokenName;                                   // Set the name for display purposes
        symbol = tokenSymbol;                               // Set the symbol for display purposes
        decimals = decimalUnits;                            // Amount of decimals for display purposes
           
        }

    /* Registration of new GS*/
    function new_GS(address newGSAddress_, string GASname) {
            GSnetwork_addresses.push(newGSAddress_);
            GSnetwork_names.push(GASname);
        
    }

    /* Gives the number of users with an active card */
    function numberOfUsers() constant returns (uint) {
        return User_addresses.length;
    }
    
    //Returns the info from user
    function userAddress(uint i) constant returns (address) {
        return User_addresses[i];
    }
    
    //Returns the info from GS
    function GSAddress(uint i) constant returns (address,string) {
        return (GSnetwork_addresses[i],GSnetwork_names[i]) ;
    }

    /* Gives the number of gas stations in our network */
    function numberOfGS() constant returns (uint) {
        return GSnetwork_addresses.length;
    }
    

    /* Issue a new card */
    function IssueCard(address _to, uint256 _value){
        value256=int256(_value);
        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address.
       // if (balanceOfCoin[msg.sender] < _value) throw;           // Check if the sender has enough
        if (balanceOfCoin[_to] + _value < balanceOfCoin[_to]) throw; // Check for overflows
        CreditIssued[msg.sender] += value256;                     // Mint credit
        balanceOfCoin[_to] += _value;                            // Add the same to the recipient
//      Transfer(msg.sender, _to, _value);                   
        User_addresses.push(_to);
    }
    
    /* Buy gas in a gas station. Only GS in our network*/
    function buyGas(uint256 _value, uint256 _priceGas, address _fromGS ) {
        GS_Active=false;
       value256=int256(_value);
        if (_fromGS == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead
       if (balanceOfCoin[msg.sender] < _value) throw;           // Check if the sender has enough
       // if (balanceOfCoin[_to] + _value < balanceOfCoin[_to]) throw; // Check for overflows
         for (uint i = 0; i < GSnetwork_addresses.length; i++) {
         if (_fromGS==GSnetwork_addresses[i]){
             GS_Active=true;
         }
    }
    
    if (GS_Active==true){
        GasSold[_fromGS] += (_value)/_priceGas;
        balanceOfCoin[msg.sender] -= _value;                     // Subtract from the sender
        CreditIssued[_fromGS] -= value256;                     // Subtract from gasstation
         
    }else{throw;}
    }

 /* Settlement (after one month period)*/
    function Settlement(uint256 _value, address _toSettle ) {
       value256=int256(_value);
       if ( _toSettle == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead
       if (GasCoins[msg.sender] < _value) throw;           // Check if the sender has enough
        if (GasCoins[_toSettle] + _value < GasCoins[_toSettle]) throw; // Check for overflows
       // GasSold[_fromGS] += (_value)/_priceGas;
        GasCoins[msg.sender] -= _value;                     // Subtract from the sender gascoin balance
        CreditIssued[_toSettle] += value256;                     // Add from gasstation
        CreditIssued[msg.sender] -= value256;               // Subtract from the sender credit balance
        
    }
    
    /* Buy Gascoin (necessary for settlement)*/
    
     // Dummie function representing the user buys gascoin from our exchange    
     function BuyGascoin(uint256 _value) {
         GasCoins[msg.sender] += _value;                     // Subtract from the sender gascoin balance
    }

}

